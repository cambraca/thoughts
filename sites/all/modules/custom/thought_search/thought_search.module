<?php

module_load_include('module', 'languageutil');

/**
 * Implements hook_node_insert().
 */
function thought_search_node_insert($node) {
  thought_search_node_update($node);
}

/**
 * Implements hook_node_presave().
 */
function thought_search_node_presave($node) {
  if ($node->type != 'thought' || !isset($node->nid) || (isset($node->nid) && !$node->nid) || !isset($node->original))
    return;

  //are we tracking this node already?
  if (db_select('thought_processed_nodes', 'wn')->fields('wn')->condition('wn.nid', $node->nid)->execute()->fetchField()) {
    //substract word counts from stored values in the database
    foreach (array_keys($node->original->body) as $lang) {
      $content = trim(strip_tags($node->original->body[$lang][0]['value']));
      $words = languageutil_get_words_from_text($content, $node->original->language);
      
      foreach (array_count_values($words) as $word => $count) {
        db_update('thought_word_count')
          ->expression('rank', 'rank - :rank', array(':rank' => $count))
          ->condition('language', $node->original->language)
          ->condition('word', $word)
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_node_update().
 */
function thought_search_node_update($node) {
  if ($node->type != 'thought')
    return;

  if (!db_select('thought_processed_nodes', 'wn')->fields('wn')->condition('wn.nid', $node->nid)->execute()->fetchField())
    db_insert('thought_processed_nodes')->fields(array('nid' => $node->nid))->execute();

  foreach (array_keys($node->body) as $lang) {
    $content = trim(strip_tags($node->body[$lang][0]['value']));
    $words = languageutil_get_words_from_text($content, $node->language);
    
    foreach (array_count_values($words) as $word => $count) {
      db_merge('thought_word_count')
        ->key(array('language' => $node->language, 'word' => $word))
        ->fields(array(
            'rank' => $count,
        ))
        ->expression('rank', 'rank + :rank', array(':rank' => $count))
        ->execute();
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function thought_search_node_delete($node) {
  if ($node->type != 'thought')
    return;

  //are we tracking this node already?
  if (db_select('thought_processed_nodes', 'wn')->fields('wn')->condition('wn.nid', $node->nid)->execute()->fetchField()) {
    //substract word counts from stored values in the database
    foreach (array_keys($node->body) as $lang) {
      $content = trim(strip_tags($node->body[$lang][0]['value']));
      $words = languageutil_get_words_from_text($content, $node->language);
      
      foreach (array_count_values($words) as $word => $count) {
        db_update('thought_word_count')
          ->expression('rank', 'rank - :rank', array(':rank' => $count))
          ->condition('language', $node->language)
          ->condition('word', $word)
          ->execute();
      }
    }
  }
  
  db_delete('thought_processed_nodes')->condition('nid', $node->nid)->execute();
}

/**
 * Calculate pairs of words and their distance values.
 * The returned array contains a copy of each record, for example:
 *   array(
 *     'hello good' => .8,
 *     'good hello' => .8,
 *     'hello goodbye' => .3,
 *     'goodbye hello' => .3,
 *   )
 * The values of the array are 1/x, x being the distance between the words (1 means they are next to each other).
 * @param array $words an ordered list of words
 * @return array
 */
function _thought_search_calculate_word_relations($words) {
  $ret = array();
  
  for ($i = 0; $i < count($words) - 1; $i++) {
    for ($j = $i + 1; $j < count($words); $j++) {
      if ($words[$i] == $words[$j])
        continue;
      
      $ret[$words[$i].' '.$words[$j]] = 1 / ($j-$i);
      $ret[$words[$j].' '.$words[$i]] = 1 / ($j-$i);
    }
  }
  
  return $ret;
}

/**
 * Implements hook_cron().
 */
function thought_search_cron() {
  //get list of unprocessed nodes
  $query = db_select('node', 'n');
  $query->leftJoin('thought_processed_nodes', 'wn', 'n.nid = wn.nid');
  $query
    ->fields('n', array('nid'))
    ->condition('wn.nid', NULL)
    ->condition('n.type', 'thought')
    ->range(0, 20);

  $to_update = $query->execute()->fetchCol();
  foreach ($to_update as $nid)
    thought_search_node_update(node_load($nid));
}
