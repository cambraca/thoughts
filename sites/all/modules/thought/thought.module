<?php

include_once 'google_translate.inc';

/**
 * Implements hook_node_presave().
 */
function thought_node_presave($node) {
  if ($node->type != 'thought')
    return;
  
  //override title
  $lang = key($node->body);
  $content = trim(strip_tags($node->body[$lang][0]['value']));
  $node->title = truncate_utf8($content, 80, TRUE, TRUE, 20);
}

/**
 * Implements hook_form_alter().
 */
function thought_form_thought_node_form_alter(&$form, &$form_state) {
  unset($form['title']);
}

/**
 * Implements hook_menu().
 */
function thought_menu() {
  return array(
    'new-thought' => array(
      'page callback' => 'thought_create',
      'type' => MENU_CALLBACK,
      'access callback' => TRUE,
    ),
  );
}

function thought_create() {
  $content = trim($_POST['content']);
  $category = strtolower(trim(strip_tags($_POST['category'])));
  if (!$content)
    drupal_goto();
  
  global $user;
  
  $node = array(
    'type' => 'thought',
    'language' => thought_google_translate_detect_language($content),
    'uid' => $user->uid,
    'body' => array(
      LANGUAGE_NONE => array(
        array(
          'value' => $content,
          'format' => 'filtered_html',
        )
      )
    ),
  );
  if ($category) {
    $vocabulary = taxonomy_vocabulary_machine_name_load('categories');
    $tid = thought_taxonomy_term_check_term($category, $vocabulary->vid);
    $node['field_category'] = array(
      LANGUAGE_NONE => array(
        array(
          'vid' => $vocabulary->vid,
          'tid' => $tid,
        )
      )
    );
  }
  $node = (object) $node;
  node_object_prepare($node);
  
//  $node->language = thought_google_translate_detect_language($content);
//  $node->body[LANGUAGE_NONE][0]['value'] = check_markup($content, 'filtered_html', $node->language);
//  
//  if ($category) {
////    $term = array(
////      'vid' => 2,
////      'name' => $category,
////    );
////    taxonomy_term_save($term);
////    $node->field_category[LANGUAGE_NONE][0]['tid'] = $term->id;
//    $node->field_category[LANGUAGE_NONE][0]['value'] = $category;
//  }
  node_save($node);
  
  drupal_goto('node/'.$node->nid);
}




//this is a search algorithm that could work by doing one iteration at a time in a cron
//
//$data = array(6,8,4,2,6,3,4,6,1,3,2,8,5,9);
//function show() {
//  global $data;
//  echo '-----------------------'.PHP_EOL;
//  for ($i = 0; $i < count($data); $i++)
//    echo str_repeat('*', $data[$i]).PHP_EOL;
//}
//
//shuffle($data);
//
//show();
//for ($i = 0; $i < 100; $i++) {
//  for ($j = 1; $j < count($data); $j++) {
//    if ($data[$j] < $data[$j-1]) {
//      $temp = $data[$j];
//      $data[$j] = $data[$j-1];
//      $data[$j-1] = $temp;
//    }
//  }
//  sleep(1);
//  show();
//}

/**
 * Checks whether a term identified by name and vocabulary exists. Creates a
 * new term if it does not exist.
 *
 * @param $name
 *   A term name.
 * @param $vid
 *   A vocabulary id.
 *
 * @return
 *   A term id.
 */
function thought_taxonomy_term_check_term($name, $vid) {
  $name = trim($name);
  $term = thought_taxonomy_term_lookup_term($name, $vid);
  if (empty($term)) {
    $term = new stdClass();
    $term->name = $name;
    $term->vid = $vid;
    taxonomy_term_save($term);
    return $term->tid;
  }
  return $term->tid;
}

/**
 * Looks up a term, assumes SQL storage backend.
 */
function thought_taxonomy_term_lookup_term($name, $vid) {
  return db_select('taxonomy_term_data', 'td')
    ->fields('td', array('tid', 'name'))
    ->condition('name', $name)
    ->condition('vid', $vid)
    ->execute()
    ->fetchObject();
}